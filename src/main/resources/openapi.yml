openapi: 3.0.0
info:
  title: Customer Management API
  description: API for managing customers
  version: 1.0.0

servers:
  - url: http://localhost:8080

paths:
  /customers:
    post:
      summary: Create a new customer
      description: Creates a new customer with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get all customers
      description: Retrieves a list of all customers
      parameters:
        - in: query
          name: name
          required: false
          schema:
            type: string
          description: Filter by customer name
        - in: query
          name: email
          required: false
          schema:
            type: string
          description: Filter by customer email
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'

  /customers/{id}:
    get:
      summary: Get a customer by ID
      description: Retrieves a customer by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a customer
      description: Updates a customer with the provided details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a customer
      description: Deletes a customer by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    CustomerRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        annualSpend:
          type: number
          format: double
        lastPurchaseDate:
          type: string
          format: date-time
      required:
        - name
        - email

    CustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        annualSpend:
          type: number
          format: double
        lastPurchaseDate:
          type: string
          format: date-time
        tier:
          type: string
          enum:
            - Silver
            - Gold
            - Platinum

    Error:
      type: object
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorItem'

    ErrorItem:
      type: object
      properties:
        code:
          type: string
        message:
          type: string